{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dkhole/Documents/projects/jwt-todo/client/src/components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\n\nconst Login = ({\n  setAuth\n}) => {\n  _s();\n\n  const [input, setInput] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  const {\n    email,\n    password\n  } = input;\n\n  const updateInp = e => {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const submitLogin = async e => {\n    e.preventDefault();\n\n    try {\n      const body = {\n        email,\n        password\n      };\n      const response = await fetch(\"http://localhost:5000/auth/login\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(body)\n      });\n      const parseRes = await response.json(); //have to save jwt token to local storage\n\n      localStorage.setItem('token', parseRes.token);\n      setAuth(true);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"email\",\n        onChange: updateInp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"password\",\n        onChange: updateInp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"nmQ8vN7qHFvRH9lV8YOWY3vH35k=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/dkhole/Documents/projects/jwt-todo/client/src/components/Login.js"],"names":["React","Fragment","useState","Login","setAuth","input","setInput","email","password","updateInp","e","target","name","value","submitLogin","preventDefault","body","response","fetch","method","headers","JSON","stringify","parseRes","json","localStorage","setItem","token","error","console","message"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC;AAC/BK,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,QAAQ,EAAE;AAFqB,GAAD,CAAlC;AAKA,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,KAA5B;;AAEA,QAAMI,SAAS,GAAIC,CAAD,IAAO;AACrBJ,IAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAW,OAACK,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAArC,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAG,MAAMJ,CAAN,IAAY;AAC5BA,IAAAA,CAAC,CAACK,cAAF;;AAEA,QAAI;AACA,YAAMC,IAAI,GAAG;AAAET,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAb;AAEA,YAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC7DC,QAAAA,MAAM,EAAE,MADqD;AAE7DC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAFoD;AAG7DJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHuD,OAArC,CAA5B;AAMA,YAAMO,QAAQ,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAAvB,CATA,CAWA;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,QAAQ,CAACI,KAAvC;AACAvB,MAAAA,OAAO,CAAC,IAAD,CAAP;AACH,KAdD,CAcE,OAAOwB,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACH;AACJ,GApBD;;AAsBF,sBACE,QAAC,QAAD;AAAA,2BACI;AAAM,MAAA,QAAQ,EAAEhB,WAAhB;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,IAAI,EAAC,OAAzB;AAAiC,QAAA,WAAW,EAAC,OAA7C;AAAqD,QAAA,QAAQ,EAAEL;AAA/D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAC,UAA5B;AAAuC,QAAA,WAAW,EAAC,UAAnD;AAA8D,QAAA,QAAQ,EAAEA;AAAxE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA3CD;;GAAMN,K;;KAAAA,K;AA6CN,eAAeA,KAAf","sourcesContent":["import React, { Fragment, useState } from 'react';\n\nconst Login = ({ setAuth }) => {\n    const [input, setInput] = useState({\n        email: \"\",\n        password: \"\"\n    });\n\n    const { email, password } = input;\n\n    const updateInp = (e) => {\n        setInput({...input, [e.target.name]: e.target.value});\n    }\n\n    const submitLogin = async(e) => {\n        e.preventDefault();\n\n        try {\n            const body = { email, password };\n\n            const response = await fetch(\"http://localhost:5000/auth/login\", {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(body)\n            });\n\n            const parseRes = await response.json();\n            \n            //have to save jwt token to local storage\n            localStorage.setItem('token', parseRes.token);\n            setAuth(true);\n        } catch (error) {\n            console.error(error.message);\n        }\n    }\n\n  return (\n    <Fragment>\n        <form onSubmit={submitLogin}>\n            <input type=\"email\" name=\"email\" placeholder=\"email\" onChange={updateInp}></input>\n            <input type=\"password\" name=\"password\" placeholder=\"password\" onChange={updateInp}></input>\n            <button>Submit</button>\n        </form>\n    </Fragment>\n  );\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}